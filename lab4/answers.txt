# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Michael Wang 
Student ID: 204458659
Email: micwa6@yahoo.com

# Partner 2 (if you're working in a team)
Name: Ryan Peterman
Student ID: 704269982
Email: RyanLPeterman@gmail.com

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

TODO

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

TODO

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
1. Peer can keep requesting same task over and over again
	
	fix: when looking for a new task in main.c, compare it to the
	previous task just completed and only allow it to execute if it's
	not the same task

2. Upload request might ask for a file outside the current working directory
	
	fix: compare current working directory with the real path in
	task_upload and if they're not the same, exit

TODO

# Add any other information you'd like us to know below this line.
