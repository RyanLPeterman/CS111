# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Michael Wang 
Student ID: 204458659
Email: micwa6@yahoo.com

# Partner 2 (if you're working in a team)
Name: Ryan Peterman
Student ID: 704269982
Email: RyanLPeterman@gmail.com

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

TODO

# NOTES FROM DISCUSSION
- errors in code:
    - start_download() has buffer overflow
    - task_upload() has buffer overflow
    - task_upload() should only upload files in current directory
- other problems:
    - limit max download size
    - limit max peers
    - fix "tracker closed prematurely"
- own finds:
    - task_download() has buffer overflow

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

In start_download() and task_download(), a filename with a length greater than
FILENAMESIZ-1 would have caused a buffer overflow. This was fixed by using
strncpy() in place of strcpy(), to ensure that the filename had only
FILENAMESIZ-1 characters (with a '\0' appended to the end).

There was another buffer overflow bug in task_download() due to the use of
sprintf(). This bug occurs when there is a duplicate filename and the filename
must be extended to "[filename]~[number]~", which can exceed FILENAMESIZ
characters. We replaced sprintf() with snprintf() and specified a buffer size
of FILENAMESIZ to fix the issue.

In task_upload(), osp2p_snscanf() is used to parse for a filename with t->tail
as the length. This can lead to a buffer overflow because t->tail is normally
used with t->buf, which has a size (TASKBUFSIZ=4096) much greater than
t->filename's size (FILENAMESIZ=256). We set t->tail to the minimum of t->tail
and FILENAMESIZ-1, so that a maximum of FILENAMESIZ-1 characters will be read
into t->filename.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
1. Peer can keep requesting same task over and over again
	
	fix: when looking for a new task in main.c, compare it to the
	previous task just completed and only allow it to execute if it's
	not the same task

2. Upload request might ask for a file outside the current working directory
	
	fix: compare current working directory with the real path in
	task_upload and if they're not the same, exit

TODO

# Add any other information you'd like us to know below this line.
